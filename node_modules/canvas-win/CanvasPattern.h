#pragma once

using namespace node;
using namespace v8;
using namespace Gdiplus;

#include <memory>
#include <vector>
#include <string>

class ImageSource;

namespace node{
	namespace canvas{
		class CanvasPattern : ObjectWrap
		{
		private:			
			std::auto_ptr<TextureBrush> m_brush;

		public:
			CanvasPattern(void);
			CanvasPattern(ImageSource* imageSource, const WCHAR* repetition);
			virtual ~CanvasPattern(void);
			static Persistent<FunctionTemplate> constructor;
			static void Init(Handle<Object> target);
			static Handle<Value> New(const Arguments &args);
			static Handle<Value> NewInstance(const Arguments& args);
			TextureBrush* GetBrush() const{
				return (TextureBrush*)m_brush->Clone();
			}
		};
}}

