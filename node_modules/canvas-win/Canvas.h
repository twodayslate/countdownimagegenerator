#pragma once

#include <memory>
#include "v8helper.h"

using namespace v8;
using namespace node;

namespace node{
	namespace canvas {		

		class CanvasRenderingContext2D;

		class Canvas: ObjectWrap, ImageSource{
		private:
				int m_count;
				UINT m_width;
				UINT m_height;
				Persistent<Object> m_context;
		public:			
			Canvas();
			virtual ~Canvas();

			virtual Gdiplus::Image* GetImage();
			void Resize();
#pragma region static methods
		public:
			static inline Canvas* UnwrapCanvas(const Arguments& args);
			static Persistent<FunctionTemplate> constructor;
			static void Init(Handle<Object> target);
			static Handle<Value> New(const Arguments& args);
			
			METHOD_DEF(GetContext)

			PROP_DEF(Width)
			PROP_DEF(Height)
			
#pragma endregion
		};
	};
};