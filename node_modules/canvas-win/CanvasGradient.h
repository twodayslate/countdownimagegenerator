#pragma once
using namespace node;
using namespace v8;
using namespace Gdiplus;

#include <memory>
#include <vector>
#include <string>

namespace node{
	namespace canvas{
		struct ColorStop{
			std::wstring color;
			float position;
			ColorStop(const std::wstring& _color, float _position)
			:color(_color), position(_position){
			}
		};

		class CanvasGradient : ObjectWrap
		{
		private:			
			std::auto_ptr<Brush> m_brush;
			bool m_isLinear;
		public:
			REAL X0, Y0, X1, Y1, R0, R1;	
			std::vector<ColorStop> ColorStops;
		public:
			inline bool IsLinear() const {return m_isLinear;}
			CanvasGradient(void);
			CanvasGradient(double x0, double y0, double x1, double y1);
			CanvasGradient(double x0, double y0, double r0, double x1, double y1, double r1);
			virtual ~CanvasGradient(void);
			
			static Persistent<FunctionTemplate> constructor;
			static void Init(Handle<Object> target);
			static Handle<Value> New(const Arguments &args);
			static Handle<Value> AddColorStop(const Arguments &args);
			static Handle<Value> NewInstance(const Arguments& args);			
		};
	}
}
