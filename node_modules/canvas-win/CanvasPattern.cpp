#include "StdAfx.h"
#include "CanvasPattern.h"
#include "ImageSource.h"
#include "Image.h"
#include "Canvas.h"

using namespace node;
using namespace node::canvas;


Persistent<FunctionTemplate> CanvasPattern::constructor;

CanvasPattern::CanvasPattern(void)
{
}

CanvasPattern::CanvasPattern(ImageSource* imageSource, const WCHAR* repetition)
{
	m_brush.reset(new TextureBrush(imageSource->GetImage()));
}

CanvasPattern::~CanvasPattern(void)
{
}

void CanvasPattern::Init(Handle<Object> target){
	HandleScope scope;

	// Constructor
	constructor = Persistent<FunctionTemplate>::New(FunctionTemplate::New(CanvasPattern::New));
	constructor->InstanceTemplate()->SetInternalFieldCount(1);
	constructor->SetClassName(String::NewSymbol("CanvasPattern"));

	// Prototype	
	target->Set(String::NewSymbol("CanvasPattern"), constructor->GetFunction());
}

Handle<Value> CanvasPattern::NewInstance(const Arguments& args) {
	HandleScope scope;

	const unsigned argc = args.Length();
	Handle<Value> *argv = new Handle<Value>[argc];
	for(int i = 0; i<argc; ++i){
		argv[i] = args[i];
	}
	
	Local<Object> instance = constructor->GetFunction()->NewInstance(argc, argv);
	delete[] argv;

	return scope.Close(instance);
}

Handle<Value> CanvasPattern::New(const Arguments &args){
	HandleScope scope;

	// Linear
	if (2 == args.Length()) {
		Local<Object> obj = args[0]->ToObject();
		ImageSource* imageSource;
		if (Image::constructor->HasInstance(obj)) {
			Image *img = ObjectWrap::Unwrap<Image>(obj);
			if (!img->GetComplete()) {
				return ThrowException(Exception::Error(String::New("Image given has not completed loading")));
			}
					
			imageSource = (ImageSource*)(img);					
		} else if (Canvas::constructor->HasInstance(obj)) {
			Canvas *canvas = ObjectWrap::Unwrap<Canvas>(obj);
			imageSource = (ImageSource*)(canvas);
		}
		String::Value repValue(args[1]->ToString());
		CanvasPattern *grad = new CanvasPattern(
			imageSource
			, reinterpret_cast<WCHAR*>(*repValue));
		grad->Wrap(args.This());
		return args.This();
	}

	return ThrowException(Exception::TypeError(String::New("invalid arguments")));
}
