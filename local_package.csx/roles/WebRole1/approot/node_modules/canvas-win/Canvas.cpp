#include "stdafx.h"
#include "ImageSource.h"
#include "Canvas.h"
#include "CanvasRenderingContext2D.h"

using namespace v8;
using namespace node;
using namespace node::canvas;

Persistent<FunctionTemplate> Canvas::constructor;
Canvas* Canvas::UnwrapCanvas(const Arguments& args){
	Canvas* canvas = ObjectWrap::Unwrap<Canvas>(args.This());
	canvas->m_count++;
	return canvas;
}
					
void Canvas::Init(Handle<Object> target)
{
	HandleScope scope;
	
	// Constructor
	constructor = Persistent<FunctionTemplate>::New(FunctionTemplate::New(Canvas::New));
	constructor->InstanceTemplate()->SetInternalFieldCount(1);
	constructor->SetClassName(String::NewSymbol("Canvas"));

	// Prototype
	Local<ObjectTemplate> proto = constructor->PrototypeTemplate();
				
	NODE_SET_PROTOTYPE_METHOD(constructor, "getContext", GetContext);

	proto->SetAccessor(String::NewSymbol("width"), GetWidth, SetWidth);
	proto->SetAccessor(String::NewSymbol("height"), GetHeight, SetHeight);
				
	target->Set(String::NewSymbol("Canvas"), constructor->GetFunction());
}
		
Canvas::Canvas():
	m_count(0),
	m_width(0),
	m_height(0)
{
	m_context = Persistent<Object>::New(CanvasRenderingContext2D::constructor->InstanceTemplate()->NewInstance());
}

Canvas::~Canvas(){
}

Gdiplus::Image* Canvas::GetImage(){
	CanvasRenderingContext2D* context = ObjectWrap::Unwrap<CanvasRenderingContext2D>(m_context);
	return context->GetImage();
}

void Canvas::Resize(){
	if(m_width && m_height){
		CanvasRenderingContext2D* context = ObjectWrap::Unwrap<CanvasRenderingContext2D>(m_context);
		context->Resize(m_width, m_height);
	}
}

Handle<Value> Canvas::New(const Arguments& args)
{
	HandleScope scope;
	Canvas* canvas = new Canvas();
	canvas->Wrap(args.This());
	return args.This();
}

Handle<Value> Canvas::GetContext(const Arguments& args)
{
	HandleScope scope;
	Canvas* canvas = UnwrapCanvas(args);	
	
	return scope.Close(canvas->m_context);
}

Handle<Value> Canvas::GetWidth(Local<String> prop, const AccessorInfo &info) {
	HandleScope scope;
	Canvas *canvas = ObjectWrap::Unwrap<Canvas>(info.This());
	return scope.Close(Number::New(canvas->m_width));
}

void Canvas::SetWidth(Local<String> prop, Local<Value> val, const AccessorInfo &info) {
	if (val->IsNumber()) {					
		Canvas *canvas = ObjectWrap::Unwrap<Canvas>(info.This());
		canvas->m_width = val->Uint32Value();
		canvas->Resize();
	}
}

Handle<Value> Canvas::GetHeight(Local<String> prop, const AccessorInfo &info) {
	HandleScope scope;
	Canvas *canvas = ObjectWrap::Unwrap<Canvas>(info.This());
	return scope.Close(Number::New(canvas->m_height));
}

void Canvas::SetHeight(Local<String> prop, Local<Value> val, const AccessorInfo &info) {
	if (val->IsNumber()) {
		Canvas *canvas = ObjectWrap::Unwrap<Canvas>(info.This());
		canvas->m_height = val->Uint32Value();
		canvas->Resize();
	}
}
