#pragma once

#include <string>
#include <stack>
#include <memory>
#include <map>
#define _USE_MATH_DEFINES
#include <math.h>
#include "v8helper.h"

using namespace v8;
using namespace node;

namespace node{
	namespace canvas {		

		extern const WCHAR* LineJoinRound;
		extern const WCHAR* LineJoinBevel;
		extern const WCHAR* LineJoinMiter;
		extern const WCHAR* LineCapButt;
		extern const WCHAR* LineCapRound;
		extern const WCHAR* LineCapSquare;
		extern const WCHAR* TextAlignStart;
		extern const WCHAR* TextAlignEnd;		
		extern const WCHAR* TextAlignCenter;
		extern const WCHAR* TextAlignMiddle;
		extern const WCHAR* TextAlignTop;
		extern const WCHAR* TextAlignBottom;
		
		using namespace Gdiplus;

		class CanvasGradient;

		struct SavedState{
			GraphicsState graphicsState;
			std::auto_ptr<Brush> brush;
			std::auto_ptr<Pen> pen;
			std::auto_ptr<Font> font;
			std::auto_ptr<StringFormat> stringFormat;
			PointF lastPoint;
			int lineWidth;
			REAL globalAlpha;
		};

		class CanvasRenderingContext2D: public ObjectWrap{
		private:
				int m_count;	
				int m_lineWidth;
				REAL m_globalAlpha;
				std::auto_ptr<Bitmap> m_buffer;
				std::auto_ptr<Graphics> m_graphics;
				static ULONG_PTR gdiplusToken;
				PointF m_point;
				std::auto_ptr<Pen> m_pen;
				std::auto_ptr<Brush> m_brush;
				std::auto_ptr<Brush> m_clearBrush;
				std::auto_ptr<GraphicsPath> m_currentPath;
				std::auto_ptr<Font> m_font;
				std::auto_ptr<StringFormat> m_stringFormat;
				std::stack<SavedState*> m_states;
				std::map<std::wstring, std::wstring> m_cssColors;
				Persistent<Value> m_strokeStyle;
				Persistent<Value> m_fillStyle;
				std::wstring m_fontString;
		private:
			static inline CanvasRenderingContext2D* UnwrapContext(const Arguments& args);
			static int GetEncoderClsid(const WCHAR* format, CLSID* pClsid);
			inline void EnsurePathCreated();
			Gdiplus::Color GetColorFromString(const WCHAR *value);
			std::auto_ptr<Brush> BrushFromGradient(const CanvasGradient* grad);
			void UpdateBrushWithGlobalAlpha();
		public:
			CanvasRenderingContext2D();
			virtual ~CanvasRenderingContext2D();
			Gdiplus::Image* GetImage();
			void Resize(UINT width, UINT height);
			void MoveTo(REAL x, REAL y);
			void Rect(REAL x, REAL y, REAL width, REAL height);
			void Arc(REAL x, REAL y, REAL radius, REAL startAngle, REAL stopAngle, bool anitclockwise);
			void LineTo(REAL x, REAL y);
			void QuadraticCurveTo(REAL cpx, REAL cpy, REAL x, REAL y);
			void BezierCurveTo(REAL cp1x, REAL cp1y, REAL cp2x, REAL cp2y, REAL x, REAL y);
			void Fill();
			void Stroke();
			void ClosePath();
			void BeginPath();
			void Clip();
			void Save();
			void Restore();
			void ClearRect(INT x, INT y, INT width, INT height);
			void FillRect(INT x, INT y, INT width, INT height);
			void StrokeRect(INT x, INT y, INT width, INT height);
			const WCHAR* GetLineJoin();
			void SetLineJoin(const WCHAR* join);
			const WCHAR* GetLineCap();
			void SetLineCap(const WCHAR* cap);
			INT GetLineWidth();
			void SetLineWidth(INT value);
			REAL GetGlobalAlpha();
			void SetGlobalAlpha(REAL value);
			void DrawImage(ImageSource* imageSource, INT dx, INT dy);
			void DrawImage(ImageSource* imageSource, INT dx, INT dy, INT dw, INT dh);
			void DrawImage(ImageSource* imageSource, INT sx, INT sy, INT sw, INT sh, INT dx, INT dy, INT dw, INT dh);
			void Scale(REAL x, REAL y);
			void Rotate(REAL angle);
			void Translate(REAL x, REAL y);
			void Transform(REAL a, REAL b, REAL c, REAL d, REAL e, REAL f);
			void SetTransform(REAL a, REAL b, REAL c, REAL d, REAL e, REAL f);
			void ResetTransform();
			void SetStrokeColor(const WCHAR* color);
			void SetFillColor(const WCHAR* color);
			void SetGradientFill(const CanvasGradient* grad);
			void SetGradientStroke(const CanvasGradient* grad);
			void FillText(const WCHAR* text, double x, double y, REAL maxWidth);
			void StrokeText(const WCHAR* text, double x, double y, REAL maxWidth);
			const WCHAR* GetFont();
			void SetFont(const WCHAR* value);
			const WCHAR* GetTextAlign();
			void SetTextAlign(const WCHAR* value);
			const WCHAR* GetTextBaseline();
			void SetTextBaseline(const WCHAR* value);
			Gdiplus::RectF MeasureText(const WCHAR* value);			
		public:
			static Persistent<FunctionTemplate> constructor;
			static void Init(Handle<Object> target);
			METHOD_DEF(New)
			METHOD_DEF(SaveToFile)
			METHOD_DEF(MoveTo)
			METHOD_DEF(LineTo)
			METHOD_DEF(ClearRect)
			METHOD_DEF(FillRect)
			METHOD_DEF(StrokeRect)
			METHOD_DEF(Rect)
			METHOD_DEF(Arc)
			METHOD_DEF(BezierCurveTo)
			METHOD_DEF(QuadraticCurveTo)
			METHOD_DEF(DrawImage)			
			METHOD_DEF(Fill)
			METHOD_DEF(Stroke)
			METHOD_DEF(ClosePath)
			METHOD_DEF(BeginPath)
			METHOD_DEF(Clip)
			METHOD_DEF(Save)
			METHOD_DEF(Restore)
			METHOD_DEF(Scale)
			METHOD_DEF(Rotate)
			METHOD_DEF(Translate)
			METHOD_DEF(Transform)
			METHOD_DEF(SetTransform)
			METHOD_DEF(ResetTransform)
			METHOD_DEF(CreateLinearGradient)
			METHOD_DEF(CreatePattern)
			METHOD_DEF(FillText)
			METHOD_DEF(StrokeText)
			METHOD_DEF(MeasureText)

			PROP_DEF(LineWidth)
			PROP_DEF(LineJoin)
			PROP_DEF(LineCap)		
			PROP_DEF(StrokeStyle)
			PROP_DEF(FillStyle)
			PROP_DEF(Font)
			PROP_DEF(TextAlign)
			PROP_DEF(TextBaseline)
			PROP_DEF(GlobalAlpha)
		};		
	};
};