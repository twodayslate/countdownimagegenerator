#define STRINGPROP_GET(name, type) Handle<Value> type::Get##name(Local<String> prop, const AccessorInfo &info) { \
	if(info.This()->InternalFieldCount() == 0){ \
		return Undefined(); \
	} \
	HandleScope scope;##type *context = ObjectWrap::Unwrap<##type>(info.This()); return scope.Close(String::New(reinterpret_cast<const uint16_t*>(context->Get##name())));}			
#define STRINGPROP_SET(name, type) void type::Set##name(Local<String> prop, Local<Value> val, const AccessorInfo &info) {if (val->IsString()) {##type *context = ObjectWrap::Unwrap<##type>(info.This());String::Value capValue(val->ToString());context->Set##name(reinterpret_cast<WCHAR*>(*capValue));}}

#define STRINGPROP(name, type)			\
	STRINGPROP_GET(name, type)			\
	STRINGPROP_SET(name, type)

#define NUMBERPROP_GET(name, type) Handle<Value> type::Get##name(Local<String> prop, const AccessorInfo &info) {  \
	if(info.This()->InternalFieldCount() == 0){ \
		return Undefined(); \
	} \
	HandleScope scope; ##type *context = ObjectWrap::Unwrap<##type>(info.This()); return scope.Close(Number::New(context->Get##name())); }
#define NUMBERPROP_SET(name, type) void type::Set##name(Local<String> prop, Local<Value> val, const AccessorInfo &info) { if (val->IsNumber()) { ##type *context = ObjectWrap::Unwrap<##type>(info.This()); context->Set##name(val->Uint32Value());} }

#define NUMBERPROP(name, type)			\
	NUMBERPROP_GET(name, type)			\
	NUMBERPROP_SET(name, type)

#define REALNUMBERPROP_GET(name, type) Handle<Value> type::Get##name(Local<String> prop, const AccessorInfo &info) {  \
	if(info.This()->InternalFieldCount() == 0){ \
		return Undefined(); \
	} \
	HandleScope scope; ##type *context = ObjectWrap::Unwrap<##type>(info.This()); return scope.Close(Number::New(context->Get##name())); }
#define REALNUMBERPROP_SET(name, type) void type::Set##name(Local<String> prop, Local<Value> val, const AccessorInfo &info) { if (val->IsNumber()) { ##type *context = ObjectWrap::Unwrap<##type>(info.This()); context->Set##name(val->NumberValue());} }

#define REALNUMBERPROP(name, type)			\
	REALNUMBERPROP_GET(name, type)			\
	REALNUMBERPROP_SET(name, type)

#define BOOLPROP_GET(name, type) Handle<Value> type::Get##name(Local<String>, const AccessorInfo &info) {  \
	if(info.This()->InternalFieldCount() == 0){ \
		return Undefined(); \
	} \
	HandleScope scope; ##type *t = ObjectWrap::Unwrap<##type>(info.This()); return scope.Close(Boolean::New(t->Get##name())); }

#define METHOD_NOARGS(name, type) Handle<Value> type::##name(const Arguments& args){ HandleScope scope; ##type *t = ObjectWrap::Unwrap<##type>(args.This()); t->##name(); return Undefined();}



#define PROP_GET_DEF(name) static Handle<Value> Get##name(Local<String> prop, const AccessorInfo &info);
#define PROP_SET_DEF(name) static void Set##name(Local<String> prop, Local<Value> val, const AccessorInfo &info);


#define PROP_DEF(name)			\
	PROP_GET_DEF(name)			\
	PROP_SET_DEF(name)

#define METHOD_DEF(name) static Handle<Value> ##name(const Arguments& args);

#define ARG_IS_NUMBER(i, message) \
	if (!args[i]->IsNumber()) \
		return ThrowException(Exception::TypeError(String::New(message)));

#define ARG_IS_STRING(i, message) \
	if (!args[i]->IsString()) \
		return ThrowException(Exception::TypeError(String::New(message)));

