#pragma once

#include <memory>
#include <string>
#include "v8helper.h"

using namespace v8;

namespace node{
	namespace canvas {

		class Image: ObjectWrap, public ImageSource{
		private:
			Persistent<Function> onload;
			Persistent<Function> onerror;
			std::auto_ptr<Gdiplus::Image> m_image;
			std::wstring m_source;
			bool m_completed;
		private:
			void LoadImage(const std::wstring &source);
			void OnLoad();
			void OnError(Local<Value> err);
			const WCHAR* GetSource();
			void SetSource(const WCHAR* value);
			INT GetWidth();
			INT GetHeight();

		public:
			bool GetComplete();
			virtual Gdiplus::Image* GetImage();
		public:
			static Persistent<FunctionTemplate> constructor;
			static void Init(Handle<Object> target);
			static Handle<Value> New(const Arguments& args);

			PROP_DEF(Source, Image)
			PROP_GET_DEF(Width, Image)
			PROP_GET_DEF(Height, Image)
			PROP_GET_DEF(Complete, Image)

			static Handle<Value> GetOnload(Local<String>, const AccessorInfo &info);
			static void SetOnload(Local<String>, Local<Value> val, const AccessorInfo &info);
			static Handle<Value> GetOnerror(Local<String>, const AccessorInfo &info);
			static void SetOnerror(Local<String>, Local<Value> val, const AccessorInfo &info);
		};
	}
}